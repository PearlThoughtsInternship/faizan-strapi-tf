name: 'Deploying Strapi'

on:
  push:
    branches:
    - main
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
  - name: 'Terraform'
  - name: Azure Login
  uses: azure/login@v1
  with:
    enable-AzPSSession: false
    environment: azurecloud
    allow-no-subscriptions: false
    audience: api://AzureADTokenExchange
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_AR }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_AR }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_AR }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_AR }}
      ROOT_PATH: "${{ github.workspace }}/strapi"
    runs-on: ubuntu-22.04
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.6.2
    - name: Install Azure CLI
  run: |
    sudo apt-get update
    sudo apt-get install -y azure-cli

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{env.ROOT_PATH}}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: ${{env.ROOT_PATH}}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  
# Apply Terraform changes
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ${{env.ROOT_PATH}}
      
